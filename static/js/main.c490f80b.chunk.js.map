{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","password","setPassword","plaintext","setPlaintext","cryptext","setCryptext","base64Text","setBase64Text","willBase64","setWillBase64","className","TextField","required","variant","type","label","value","onChange","e","target","FormControlLabel","control","Checkbox","checked","inputProps","Button","onClick","v","Vault","bytes","utf8","encode","encoded","base64","encrypt","then","runEncrypt","color","Card","Typography","TextareaAutosize","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ogBAAe,I,0HC4DAA,MApDf,WACE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAoCN,mBAAS,IAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAAoCR,oBAAS,GAA7C,mBAAOS,EAAP,KAAmBC,EAAnB,KAYA,OACE,qBAAKC,UAAU,MAAf,SACE,iCACA,cAACC,EAAA,EAAD,CAAWC,UAAQ,EAACC,QAAQ,WAAWC,KAAK,WAAWC,MAAM,WAAWC,MAAOhB,EAAUiB,SAAU,SAAAC,GAAC,OAAIjB,EAAYiB,EAAEC,OAAOH,UAC7H,cAACL,EAAA,EAAD,CAAWC,UAAQ,EAACC,QAAQ,WAAWE,MAAM,YAAYD,KAAK,OAAOE,MAAOd,EAAWe,SAAU,SAAAC,GAAC,OAAIf,EAAae,EAAEC,OAAOH,UAC5H,gCACA,cAACI,EAAA,EAAD,CACEC,QAAS,cAACC,EAAA,EAAD,CACPC,QAASf,EACTS,SAAU,SAAAC,GAAC,OAAIT,EAAcS,EAAEC,OAAOI,UACtCC,WAAY,CAAE,aAAc,sBAE9BT,MAAM,oCAEN,cAACU,EAAA,EAAD,CAAQC,QAAS,kBAzBJ,WACjB,IAAMC,EAAI,IAAIC,QAAM,CAAC5B,SAAUA,IAC/B,GAAGQ,EAAY,CACb,IAAMqB,EAAQC,IAAKC,OAAO7B,GACpB8B,EAAUC,IAAOF,OAAOF,GAC9BtB,EAAcyB,GACdL,EAAEO,QAAQF,GAASG,KAAK9B,QAExBsB,EAAEO,QAAQhC,GAAWiC,KAAK9B,GAiBD+B,IAAcC,MAAM,UAA3C,wBAED,eAACC,EAAA,EAAD,WACE,yCAGD,cAACC,EAAA,EAAD,UACGjC,OAGH,4CAGA,cAACkC,EAAA,EAAD,CAAkBxB,MAAOZ,UCxClBqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c490f80b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React, {useState} from 'react'; \nimport {Vault} from \"ansible-vault\"\nimport {TextField, Button, TextareaAutosize, Typography, Checkbox, FormControlLabel, Card} from '@material-ui/core';\nimport base64 from \"base-64\"\nimport utf8 from \"utf8\"\n\nfunction App() {\n  const [password, setPassword]=useState(\"\")\n  const [plaintext, setPlaintext] = useState(\"\")\n  const [cryptext, setCryptext] = useState(\"\")\n  const [base64Text, setBase64Text] = useState(\"\")\n  const [willBase64, setWillBase64] = useState(false)\n  const runEncrypt = () => {\n    const v = new Vault({password: password})\n    if(willBase64) {\n      const bytes = utf8.encode(plaintext);\n      const encoded = base64.encode(bytes);\n      setBase64Text(encoded)\n      v.encrypt(encoded).then(setCryptext)\n    } else{\n      v.encrypt(plaintext).then(setCryptext)\n    }\n  }\n  return (\n    <div className=\"App\">\n      <form>\n      <TextField required variant=\"outlined\" type=\"password\" label=\"Password\" value={password} onChange={e => setPassword(e.target.value)}/>\n      <TextField required variant=\"outlined\" label=\"Plaintext\" type=\"text\" value={plaintext} onChange={e => setPlaintext(e.target.value)}/>\n      <div>\n      <FormControlLabel\n        control={<Checkbox\n          checked={willBase64}\n          onChange={e => setWillBase64(e.target.checked)}\n          inputProps={{ 'aria-label': 'primary checkbox' }}\n        />}\n        label=\"Base64 encode before encrypting\"\n      />\n        <Button onClick={() => runEncrypt()} color=\"primary\">Encrypt</Button>\n       </div>\n       <Card>\n         <h2>\n           Base64:\n         </h2>\n        <Typography>\n          {base64Text}\n        </Typography>\n        </Card>\n        <h2>\n           Encrypted:\n         </h2>\n        <TextareaAutosize value={cryptext}/>\n        \n          \n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}